from loader import dp
from aiogram.dispatcher import FSMContext
from aiogram import types
from keyboards.inline import get_choice_ikb, get_size_ikb
from utils.const import *
from utils.states import PlayOne, GameStatesGroup
from loader import db
from keyboards.default import get_registration, get_go_kb, get_go_kb_one, main_menu_kb


# üéÆüó£‚ùì‚ôªÔ∏è‚úÖüë§‚ùåüìê

@dp.message_handler(commands=['start'], state = '*')
async def cmd_start(message: types.Message, state: FSMContext):
    await message.delete()
    await state.finish()
    user_id = message.from_user.id
    await db.set_status(user_id, 'off')
    await db.set_game_size(0, user_id)
    await db.set_opponent(user_id, None)
    await db.set_step(user_id, None)
    avatar = await db.get_avatar(user_id)
    if not (await db.get_user(user_id)):
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –Ω–∞–∂–º–∏—Ç–µ <b>"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"</b>.',
                             reply_markup = get_registration())
    elif not avatar:
        await GameStatesGroup.avatar.set()
        await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä.',
                         reply_markup = get_choice_ikb())
    else:
        await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç. –í–∞—à –∞–≤–∞—Ç–∞—Ä.')
        await message.answer_photo(photo=avatar,
                             caption=avatars[avatar],
                             reply_markup=main_menu_kb())


@dp.message_handler(text='‚ùì –°–ø—Ä–∞–≤–∫–∞', state = [None, PlayOne.off])
async def cmd_help(message: types.Message):
    await message.delete()
    await message.answer(text=text, parse_mode ='HTML')

@dp.message_handler(text='‚ùå –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã', state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    await message.delete()
    st = await state.get_state()
    if st == 'GameStatesGroup:play':
        markup = get_go_kb
        await state.finish()
    else:
        markup = get_go_kb_one
        await PlayOne.off.set()
    await message.answer(text='–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã.',
                         reply_markup = markup())
    await db.set_status(message.from_user.id, 'off')
    await db.set_step(message.from_user.id, None)



@dp.message_handler(text='üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä', state = [None, PlayOne.off])
async def cmd_start(message: types.Message):
    await message.delete()
    await message.answer(text='–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∞',
                         reply_markup = get_choice_ikb())

@dp.message_handler(text='üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è', state = [None, PlayOne.off])
async def cmd_start(message: types.Message):
    await message.delete()
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è',
                         reply_markup = get_size_ikb())

@dp.message_handler(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', state = [None, PlayOne.off])
async def cmd_start(message: types.Message, state: FSMContext):
    await message.delete()
    await state.finish()
    st = await state.get_state()
    if st is None:
        await db.set_opponent(message.from_user.id)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã üëá',
                         reply_markup = main_menu_kb())

@dp.message_handler(text='‚õ¥ –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞')
async def cmd_start(message: types.Message):
    await message.delete()
    await PlayOne.off.set()
    await message.answer(text='–ú–µ–Ω—é –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã',
                         reply_markup = get_go_kb_one())

@dp.message_handler(text='üö¢ –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä')
async def cmd_start(message: types.Message):
    await message.delete()
    await message.answer(text='–ú–µ–Ω—é –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞',
                         reply_markup = get_go_kb())