from loader import dp, bot
import asyncio
from random import choice
from aiogram.types import ChatActions
from aiogram.dispatcher import FSMContext
from data import StartGame
from aiogram import types
from keyboards.default import get_cancel_kb, get_go_kb
from utils.states import GameStatesGroup
from loader import db


@dp.message_handler(text='üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
async def cmd_go(message: types.Message, state: FSMContext):
    await message.delete()
    player_id = message.from_user.id
    opponent_id = await db.get_opponent(player_id)
    if not opponent_id:
        return await message.answer(text='–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞.')
    maybe_opponent = await db.get_opponent(opponent_id)
    if maybe_opponent != player_id:
        username_op = (await db.get_user(opponent_id))[2]
        return await message.answer(text=f'–û–ø–ø–æ–Ω–µ–Ω—Ç @{username_op} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∏–≥—Ä—É.')
    step_op = await db.get_step(opponent_id)
    if not step_op or step_op == 'opponent':
        await db.set_step(player_id, 'you')
    else:
        await db.set_step(player_id, 'opponent')
    step_us = await db.get_step(player_id)
    db_size = await db.get_game_size(player_id)
    db_size_op = await db.get_game_size(opponent_id)
    equal = db_size == db_size_op
    if not equal:
        return await message.answer(text = '–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ –ø–æ–ª—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞.\n'
                                           '‚ö†Ô∏è <b>–ò–∑–º–µ–Ω–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è.</b>')
    await GameStatesGroup.play.set()
    await db.set_status(player_id, 'active')
    async with state.proxy() as data:
        if db_size:
            data['game'] = StartGame(db_size)

        else:
            db_size = choice(range(7,11))
            data['game'] = StartGame(db_size)
            await db.set_game_size(db_size, player_id)
            await db.set_game_size(db_size, opponent_id)

        my_pole = data['game'].user.get_pole()
        my_pole = ','.join([' '.join([str(i) for i in j]) for j in my_pole])
        await db.set_pole(pole=my_pole, player_id=player_id, opponent_id=opponent_id)
        if step_us == 'you':
            await message.answer(f"–†—ã–±–∞ - –∫–∞—Ä–∞—Å—å, –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–∞—à —Ö–æ–¥.\n–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –æ—Ç 1 –¥–æ {db_size}.",
                         reply_markup=get_cancel_kb())
        else:
            await message.answer(
                f"–†—ã–±–∞ - –∫–∞—Ä–∞—Å—å, –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n"
                f"–†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è - {db_size}\n"
                f"<b>–°–µ–π—á–∞—Å —Ö–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞.</b>",
                reply_markup=get_cancel_kb())



@dp.message_handler(lambda message: len(message.text.split())==2
                    and all([ i.isdigit() and 1<=int(i)<=10 for i in message.text.split()]), state = GameStatesGroup.play)
async def computer_step(message: types.Message, state: FSMContext):

    x, y = message.text.split()
    player_id = message.from_user.id
    opponent_id = await db.get_opponent(player_id)
    if not opponent_id:
        return await message.answer(text='–í–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫ –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ.')
    opponent_status = await db.get_status(opponent_id)
    if opponent_status == 'off':
        return await message.answer(f'<b>–í–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ –≤ –∏–≥—Ä–µ.</b>\n'
                             f'–í—ã–π–¥–∏—Ç–µ –∏–∑ –∏–≥—Ä—ã üëá, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é.\n'
                             f'üï∞ –ò–ª–∏ <b>–¥–æ–∂–¥–∏—Ç–µ—Å—å</b>, –ø–æ–∫–∞ –æ–Ω –∑–∞–π–¥–µ—Ç.')


    step_us = await db.get_step(player_id)
    if step_us != 'you':
        return await message.answer('–°–µ–π—á–∞—Å —Ö–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞.\n<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –æ–Ω –ø–æ—Ö–æ–¥–∏—Ç!</b>')
    player_avatar = await db.get_avatar(player_id)
    opponent_avatar = await db.get_avatar(opponent_id)
    async with state.proxy() as data:
        tmp_size = await db.get_game_size(player_id)
        if not all([ 1<=int(i)<=tmp_size for i in message.text.split()]):
            return await message.answer(text=f'–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–Ω—Ç–Ω–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –æ—Ç 1 –¥–æ {tmp_size}.')
        game = data['game']

        pole_op = await db.get_pole_op(player_id)
        pole_op = [[int(i) for i in j.split()] for j in pole_op.split(',')]
        res, pole_op = game.check_fly_list(pole_op, tmp_size, int(x)-1, int(y)-1)
        if res not in ["–ü–æ–ø–∞–ª, –∫–æ—Ä–∞–±–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω", "–ü–æ–ø–∞–ª"]:
            await db.set_step(player_id = player_id, queue = 'opponent')
            await db.set_step(player_id=opponent_id, queue='you')
        await bot.send_chat_action(player_id, ChatActions.TYPING)
        await asyncio.sleep(1)
        res = res + f'\n–•–æ–¥: {x} {y}' if "–≤—ã–∏–≥—Ä–∞–ª–∏" not in res else res

        if '–≤—ã–∏–≥—Ä–∞–ª–∏' in res:
            await bot.send_photo(chat_id=player_id,
                                 photo=player_avatar)
            await message.answer(text = res,
                                 reply_markup = get_go_kb())

            await db.set_status(player_id, 'off')
            await db.set_status(opponent_id, 'off')
            await db.set_step(message.from_user.id, None)
            await state.finish()
            await bot.send_photo(chat_id=opponent_id,
                                 photo=opponent_avatar)
            await bot.send_message(chat_id = opponent_id,
                                 text=f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ò–≥—Ä–æ–∫ @{message.from_user.username} –≤—ã–∏–≥—Ä–∞–ª üí™\n'
                                         f'–í—ã–π–¥–∏—Ç–µ –∏–∑ –∏–≥—Ä—ã üëá, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é.')


        else:
            await bot.send_photo(chat_id=player_id,
                                 photo=player_avatar,
                                 caption=res)
            await bot.send_photo(chat_id=opponent_id,
                                 photo=player_avatar,
                                 caption=res)
            st_op = '0Ô∏è‚É£' + ''.join(['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'][:tmp_size]) + '\n' + '\n'.join([k +
                 ''.join(['‚¨úÔ∏è' if pole_op[i][j] in(0,1) else 'üí§' if pole_op[i][j] == 4 else '‚ùé'
                    if pole_op[i][j] == 3 else 'üü•' for j in range(tmp_size)])
                 for i, k in zip(range(tmp_size),[ '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'])])

            to_op = '0Ô∏è‚É£' + ''.join(['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'][:tmp_size]) + '\n' + '\n'.join([k +
                 ''.join(['‚¨úÔ∏è' if pole_op[i][j] in(0,4) else 'üü¶' if pole_op[i][j] == 1 else '‚ùé'
                    if pole_op[i][j] == 3 else 'üü•' for j in range(tmp_size)])
                 for i, k in zip(range(tmp_size),[ '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'])])

            pole_op = ','.join([' '.join([str(i) for i in j]) for j in pole_op])

            await db.set_pole(pole= pole_op, player_id= opponent_id, opponent_id=player_id)
            pole_user = await db.get_pole_my(player_id)
            pole_user = [[int(i) for i in j.split()] for j in pole_user.split(',')]

            st_user = '0Ô∏è‚É£' + ''.join(['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'][:tmp_size]) + '\n' + '\n'.join([k +
                 ''.join(['‚¨úÔ∏è' if pole_user[i][j] in(0,4) else 'üü¶' if pole_user[i][j] == 1 else '‚ùé'
                    if pole_user[i][j] == 3 else 'üü•' for j in range(tmp_size)])
                 for i, k in zip(range(tmp_size),[ '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'])])

            to_user = '0Ô∏è‚É£' + ''.join(['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'][:tmp_size]) + '\n' + '\n'.join([k +
                 ''.join(['‚¨úÔ∏è' if pole_user[i][j] in(0,1) else 'üí§' if pole_user[i][j] == 4 else '‚ùé'
                    if pole_user[i][j] == 3 else 'üü•' for j in range(tmp_size)])
                 for i, k in zip(range(tmp_size),[ '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'])])

            pole_user = ','.join([' '.join([str(i) for i in j]) for j in pole_user])
            await db.set_pole(pole=pole_user, player_id=player_id, opponent_id=opponent_id)



            await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
            await asyncio.sleep(1)
            await message.answer(text="–ü–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n"+st_op)
            await message.answer(text="–í–∞—à–µ –ø–æ–ª–µ:\n" + st_user)
            await bot.send_chat_action(opponent_id, ChatActions.TYPING)
            await asyncio.sleep(1)
            await bot.send_message(chat_id = opponent_id, text = "–ü–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n"+to_user)
            await bot.send_message(chat_id=opponent_id, text="–í–∞—à–µ –ø–æ–ª–µ:\n" + to_op)



@dp.message_handler(state = GameStatesGroup.play)
async def not_correct_data(message: types.Message):
    db_size = await db.get_game_size(message.from_user.id)
    await message.answer(text=f'–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–Ω—Ç–Ω–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –æ—Ç 1 –¥–æ {db_size}.')
